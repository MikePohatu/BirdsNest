@using Newtonsoft.Json
@using Console.neo4jProxy

@{
    Layout = "_Layout_NonSpa";
}

@model ResultSet
@Html.Hidden("results", JsonConvert.SerializeObject(Model))

@if (Model.Nodes.Count > 0)
{
    <div>
        <ul class="dropdown menu" data-dropdown-menu data-close-on-click="false" data-close-on-click-inside="false">
            <li>
                <a>Query returned @Model.Nodes.Count nodes.</a>
                <ul class="menu">
                    <li>
                        <a href="#">Columns</a>
                        <ul class="vertical menu nested" id="columnstoggles"></ul>
                    </li>
                    <li><a id="downloadlink" href="#" onclick="javascript:onDownloadClicked()">Download</a></li>
                    <li><a id="visualizerlink" href="#" onclick="javascript:onVisualizerClicked()">Open in Visualizer</a></li>
                </ul>
        </ul>
    </div>
    <div class="table-scroll">
        <table id="outputtable" class="hover">
            <thead>
                <tr id="outputHeader"></tr>
            </thead>
            <tbody id="outputBody"></tbody>
        </table>

    </div>
}
else
{ <div>Search returned no results.</div>}

@section Scripts
    {
    <script>
        var resultset = JSON.parse(results.value);
        var tHeader = document.getElementById('outputHeader');
        var tBody = document.getElementById('outputBody');
        var el;
        var columnstyleprefix = "col-";
        var toggleprefix = "toggle-";
        var columnstoggles = document.getElementById("columnstoggles");

        //add the header
        function addTH(key) {
            el = document.createElement("TH");
            el.classList.add(columnstyleprefix + key);
            el.classList.add("visible");
            el.innerHTML = key;
            tHeader.appendChild(el);

            //<li>
            //        <label class="filter" for="toggle-dn">
            //            <input id="toggle-dn" type="checkbox" data-label="dn" />
            //            <text>TEST</text>
            //        </label>
            //</li>
            var li = document.createElement("li");
                     

            var label = document.createElement("label");
            label.attributes.for = toggleprefix + key;
            label.classList.add("toggleitem");

            var textpart = document.createTextNode(key);

            var checkbox = document.createElement("input");
            checkbox.classList.add("toggleitem");
            checkbox.id = toggleprefix + key;
            checkbox.type = "checkbox";
            checkbox.onchange = onToggleClicked;
            checkbox.dataset.label = key;

            li.appendChild(label);
            label.appendChild(checkbox);
            label.appendChild(textpart);
            columnstoggles.appendChild(li);
        }

        Object.keys(resultset.PropertyFilters).forEach(function (key) {
            addTH(key);
        });

        Object.keys(resultset.PropertyNames).forEach(function (key) {
            if (!(key in resultset.PropertyFilters)) {
                addTH(key);
            }
        });

        //add the cells
        resultset.Nodes.forEach(function (node) {
            var contents;
            var row = tBody.insertRow();

            function addTD(key) {
                if (key in node.properties) { contents = node.properties[key]; }
                else { contents = ""; }

                el = document.createElement("TD");
                el.classList.add(columnstyleprefix + key);
                el.classList.add("visible");
                el.innerHTML = contents;
                row.appendChild(el);
            }

            Object.keys(resultset.PropertyFilters).forEach(function (key) {
                addTD(key);
            });

            Object.keys(resultset.PropertyNames).forEach(function (key) {
                if (!(key in resultset.PropertyFilters)) {
                    addTD(key);
                }
            });
        });

        //update visibility to hide unneeded columns
        if (resultset.PropertyFiltersApplied === true) {
            
            Object.keys(resultset.PropertyNames).forEach(function (key) {
                var shown = (key in resultset.PropertyFilters);
                SetClassVisible(columnstyleprefix + key, shown);
                var togglebox = document.getElementById(toggleprefix + key);
                togglebox.checked = shown;
            });
        }

        function onToggleClicked() {
            var el = event.target;
            var key = columnstyleprefix + el.dataset.label;
            SetClassVisible(key, el.checked);
        }

        function SetClassVisible(classname, show) {
            //console.log("SetClassVisible: " + classname + ":" + show);
            var classelements = document.getElementsByClassName(classname);

            for (var i = 0; i < classelements.length; i++) {

                if (show === true) {
                    classelements[i].classList.add('visible');
                    classelements[i].classList.remove('hidden');
                } else {
                    classelements[i].classList.add('hidden');
                    classelements[i].classList.remove('visible');
                }
            }
        }

        function onVisualizerClicked() {
            if (typeof (Storage) !== "undefined") {
                sessionStorage.birdsnest_resultset = JSON.stringify(resultset);
                window.location.href = "/visualizer?usestored=true";
                // Code for localStorage/sessionStorage.
            } else {
                console.log("No Web Storage support..");
                // Sorry! No Web Storage support..
            }
        }

        function onDownloadClicked() {
            var text = "";
	        var rows = document.querySelectorAll("#outputtable tr");
	
            for (var i = 0; i < rows.length; i++) {
                var row = [];
                var cols = rows[i].querySelectorAll("td.visible, th.visible");
                var celltext = "";
                for (var j = 0; j < cols.length; j++) {
                    celltext = cols[j].innerText === null ? "" : cols[j].innerText;
                    celltext = celltext.replace("\"", "\"\"");
                    row.push("\"" + celltext + "\""); 
                } 
                text = text + (row.join(",")) + "\n";
            }

            Download(text, "results.csv", 'text/csv;encoding:utf-8');
        }

        //https://stackoverflow.com/questions/14964035/how-to-export-javascript-array-info-to-csv-on-client-side
        // The download function takes a CSV string, the filename and mimeType as parameters
        // Scroll/look down at the bottom of this snippet to see how download is called
        function Download(content, fileName, mimeType) {
            console.log("Download:");
            //console.log(content);
            var a = document.createElement('a');
            mimeType = mimeType || 'application/octet-stream';

            if (navigator.msSaveBlob) { // IE10
                navigator.msSaveBlob(new Blob([content], {
                    type: mimeType
                }), fileName);
            } else if (URL && 'download' in a) { //html5 A[download]
                console.log("HTML5");
                a.href = URL.createObjectURL(new Blob([content], {
                    type: mimeType
                }));
                //a.href = 'data:application/octet-stream,' + encodeURIComponent(content);
                a.setAttribute('download', fileName);
                document.body.appendChild(a);
                a.onclick = function () { console.log("clicked"); };
                //a.innerHTML = "Ready";
                a.click();
                document.body.removeChild(a);
                
            } else {
                location.href = 'data:application/octet-stream,' + encodeURIComponent(content); // only this mime type is supported
            }
        }
    </script>
}