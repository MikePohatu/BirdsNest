// Hello World!
CREATE (database:Database {name:"Neo4j"})-[r:SAYS]->(message:Message {name:"Hello World!"}) RETURN database, message, r
VM3274:2 // Get some data
MATCH (n1)-[r]->(n2) RETURN r, n1, n2 LIMIT 25
VM3274:2 // Create an index
// Replace:
//   'LabelName' with label to index
//   'propertyKey' with property to be indexed
CREATE INDEX ON :<LabelName>(<propertyKey>)
VM3274:2 // Create unique property constraint
// Replace:
//   'LabelName' with node label
//   'propertyKey' with property that should be unique
CREATE CONSTRAINT ON (n:<LabelName>) ASSERT n.<propertyKey> IS UNIQUE
VM3274:2 // Count all nodes
MATCH (n)
RETURN count(n)
VM3274:2 // Count all relationships
MATCH ()-->() RETURN count(*);
VM3274:2 // What kind of nodes exist
// Sample some nodes, reporting on property and relationship counts per node.
MATCH (n) WHERE rand() <= 0.1
RETURN
DISTINCT labels(n),
count(*) AS SampleSize,
avg(size(keys(n))) as Avg_PropertyCount,
min(size(keys(n))) as Min_PropertyCount,
max(size(keys(n))) as Max_PropertyCount,
avg(size( (n)-[]-() ) ) as Avg_RelationshipCount,
min(size( (n)-[]-() ) ) as Min_RelationshipCount,
max(size( (n)-[]-() ) ) as Max_RelationshipCount
VM3274:2 // What is related, and how
CALL db.schema()
VM3274:2 // List node labels
CALL db.labels()
VM3274:2 // List relationship types
CALL db.relationshipTypes()
VM3274:2 // Display constraints and indexes
:schema
VM3274:2 // Movie Graph
:play movie-graph
// Northwind Graph

:play northwind-graph
// List procedures

CALL dbms.procedures()
List functions
CALL dbms.functions()
VM3274:2 // Show meta-graph
CALL db.schema()
VM3274:2 // List running queries
CALL dbms.listQueries()
VM3274:2 // Wait for index to come online
// E.g. db.awaitIndex(":Person(name)")
CALL db.awaitIndex(<param>)
VM3274:2 // Schedule resampling of an index
// E.g. db.resampleIndex(":Person(name)")
CALL db.resampleIndex(<param>)
VM3274:2 MATCH p=(a:AD_GROUP)-[r:AD_MemberOf]-()
WHERE a.name='Test3'
RETURN p
VM3274:2 CREATE (a:AD_GROUP{name:'Test3',type:'Security'})
VM3274:2 MATCH (a:AD_GROUP),(b:AD_GROUP)
WHERE a.name = 'Test2' AND b.name = 'Test3'
CREATE (a)-[r:AD_MemberOf]->(b)
RETURN type(r)
VM3274:2 MATCH (n) RETURN n
VM3274:2 MATCH (s)
WHERE ID(s) = 23
RETURN s
VM3274:2 MERGE (a:AD_GROUP{name:'Test3'})
SET a.type = 'Distribution'
SET a.SID = '1234asdf'
RETURN a
VM3274:2 MATCH (n)
DETACH DELETE n
VM3274:2 CREATE CONSTRAINT ON (g:AD_GROUP) ASSERT g.distinguishedName IS UNIQUE
CREATE CONSTRAINT ON (g:AD_GROUP) ASSERT g.ID IS UNIQUE
VM3274:2 MATCH p=(a:AD_Object)-[r:AD_MemberOf]-(b:User)
WHERE a.name='Domain Users'
RETURN b
VM3274:2 MATCH path=(a:User)-[r]-(b:AD_Object)
WHERE b.name='Domain Users' AND a.name='test'
RETURN path
VM3274:2 MATCH path=(u:User{name:'Mike Pohatu'})-[r*]->(g:AD_Object{name:'Server Admins'})
return path