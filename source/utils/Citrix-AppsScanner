#$creds = Get-Credential
#-Credential $creds 

$zdc ='wn0ntctxzdcpp01'
[string]$ENV = 'XA6.5_UAT'

write-host "Querying $zdc"

Function Get-CitrixApps {
    Param ([Parameter(Mandatory=$true)][string]$DataCollector)
    $resultobj = Invoke-Command -ComputerName $DataCollector -ScriptBlock {
        $results = new-object 'system.collections.generic.dictionary[[string],[object]]'
        write-host $results.GetType()

        Add-PSSnapin “Citrix.XenApp.Commands”
        $appslist = New-Object 'System.Collections.Generic.List[object]'
        $relationshipslist = New-Object 'System.Collections.Generic.List[object]'
        
        $AllApplications = Get-XAApplication
        ForEach ($Application in $AllApplications) {
            #$myobj = "" | select BrowserName,ApplicationId,Enabled,FolderPath,LoadBalancingApplicationCheckEnabled,CommandLineExecutable,ClientFolder,AccountName,AccountDN
            $AppGroupObj = Get-XAAccount -BrowserName $Application.BrowserName | Select *

            $appobj = new-object 'system.collections.generic.dictionary[[string],[string]]'
            $appobj.Add('BrowserName', $Application.BrowserName)
            $appobj.Add('ApplicationId',$Application.ApplicationId)
            $appobj.Add('Enabled', $Application.Enabled)
            $appobj.Add('FolderPath', $Application.FolderPath)
            $appobj.Add('LoadBalancingApplicationCheckEnabled', $Application.LoadBalancingApplicationCheckEnabled)
            $appobj.Add('ClientFolder', $Application.ClientFolder)
            #$appobj.Add('AccountName',$AppGroupObj.AccountName)
            #$appobj.Add('AccountDN',$AppGroupObj.SearchPath)

            $appslist.Add($appobj)

            foreach ($groupdn in $AppGroupObj.SearchPath) {
                $relobj = new-object 'system.collections.generic.dictionary[[string],[string]]'
                $relobj.Add('groupdn',$groupdn)
                $relobj.Add('appid',$Application.ApplicationId)
                $relationshipslist.Add($relobj)
            }
        }

        $results.Add('applications',$appslist)
        $results.Add('relationships',$relationshipslist)
        return $results
    }

    return $resultobj
}



Function WriteToNeo {
    Param (
        [Parameter(Mandatory=$true)][string]$NeoConfigPath,
        [Parameter(Mandatory=$true)][string]$NeoDriverPath,
        [Parameter(Mandatory=$true)][string]$Query,
        [System.Collections.Generic.IDictionary[[string],[object]]]$Parameters
    )
    $results = $null

    try {
        # Import DLLs
        Add-Type -Path "$NeoDriverPath"

        $neoconfig = Get-Content -Raw -Path $NeoConfigPath | ConvertFrom-Json
        #$authToken = [Neo4j.Driver.V1.AuthTokens]::Basic($neoconfig.DB_Username,$neoconfig.DB_Password)
        $serverURL="http://localhost:7474/db/data/transaction/commit"

        $secPasswd = ConvertTo-SecureString $neoconfig.DB_Password -AsPlainText -Force
        $neo4jCreds = New-Object System.Management.Automation.PSCredential ($neoconfig.DB_Username, $secPasswd) 
        $paramsjson = $Parameters | ConvertTo-Json

        # Cypher query using parameters to pass in properties
        $fullquery='{"statements" : [{' +
                    '"statement" : "' + $Query + '",' +
                    '"parameters" : ' + $paramsjson +
                    '}]' +
                '}'         

        # Call Neo4J HTTP EndPoint, Pass in creds & POST JSON Payload
        $response = Invoke-WebRequest -Uri $serverURL -Method POST -Body $fullquery -credential $neo4jCreds -ContentType "application/json"

    } 
    finally {
      
    }
    return $response
}





$resultsobj = Get-CitrixApps -DataCollector $zdc

write-host "Writing to neo4j database"

$installpath = 'C:\Tools\Temp\birdsnest\Scanners'

write-host "Writing nodes"
$paramsobj = new-object 'system.collections.generic.dictionary[[string],[object]]'
$paramsobj.Add('env',$ENV)
$paramsobj.Add('applications',$resultsobj.applications)

$query = 'WITH $env as envname, $applications as applist ' +
        'MATCH (cenv:CTX_Farm {env:envname}) ' +
        'WITH cenv,envname,applist '+ 
        'UNWIND applist as app ' +
        'MERGE (n:CTX_Application {id:app.ApplicationId}) ' +
        'SET n.applicationid = app.ApplicationId ' +
        'SET n.browsername = app.BrowserName ' +
        'SET n.name = app.BrowserName ' +
        'SET n.enabled = app.Enabled ' +
        'SET n.folderpath = app.FolderPath ' +
        'SET n.path = app.FolderPath ' +
        'SET n.clientfolder = app.ClientFolder ' +
        'SET n.environment = envname ' +   
        'WITH n,cenv ' +
        'MERGE (n)-[:PUBLISHED_FROM]->(cenv) '+    
        'RETURN count(n) '

$noderesponse = WriteToNeo -NeoConfigPath "$($installpath)\neoconfig.json" -NeoDriverPath "$($installpath)\Neo4j.Driver.dll" -Query $query -Parameters $paramsobj


Write-Host "Writing relationships"
$paramsobj = new-object 'system.collections.generic.dictionary[[string],[object]]'
$paramsobj.Add('relationships',$resultsobj.relationships)

$query = 'UNWIND $relationships as rel ' +
        'MERGE p=(g:AD_Group {dn:rel.groupdn})-[:GIVES_ACCESS_TO]->(n:CTX_Application {id:rel.appid})' +   
        'RETURN p '

$relresponse = WriteToNeo -NeoConfigPath "$($installpath)\neoconfig.json" -NeoDriverPath "$($installpath)\Neo4j.Driver.dll" -Query $query -Parameters $paramsobj
